<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html 
  xmlns="http://www.w3.org/1999/xhtml" 
  xml:lang="en" 
  lang="en" 
  xmlns:epub="http://www.idpf.org/2007/ops"
>
  <head>
    <title>Portable EPUBs</title>
    <meta charset="utf-8"></meta>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
  </head>
  <body>  
    <article>
    <header>
      <h1>Portable EPUBs</h1>
      <doc-authors>
        <doc-author>
          <doc-author-name><a href="https://willcrichton.net/" target="_blank">Will Crichton</a></doc-author-name>
          <doc-author-affiliation>Brown University</doc-author-affiliation>
        </doc-author>
      </doc-authors>
      <doc-publication-date>January 25, 2024</doc-publication-date>
      <doc-abstract>
        Despite decades of advances in document rendering technology, most of the world's documents are stuck in the 1990s due to the limitations of PDF.
        Yet, modern document formats like HTML have yet to provide a competitive alternative to PDF. This post explores what prevents HTML documents from being portable, and I propose a way forward based on the EPUB format. To demonstrate my ideas, this post is presented using a new prototype EPUB reading system.
      </doc-abstract>
    </header>
    <section>
      <h2 id="good-and-bad-pdf">The Good and Bad of PDF</h2>

      <p>
        PDF is the de facto file format for reading and sharing digital documents like papers, textbooks, and flyers. People use the PDF format for several reasons:
      </p>

      <ul>
        <li><strong>PDFs are self-contained.</strong> A PDF is a single file that contains all the images, fonts, and other data needed to render it. It's easy to pass around a PDF. A PDF is unlikely to be missing some critical dependency on your computer.</li>
        <li><strong>PDFs are rendered consistently.</strong> A PDF specifies precisely how it should be rendered, so a PDF author can be confident that a reader will see the same document under any conditions.</li>
        <li><strong>PDFs are stable over time.</strong> PDFs from decades ago still render the same today. PDFs have a <a href="https://www.iso.org/standard/75839.html">relatively stable standard</a>. PDFs cannot be easily edited.</li>
      </ul>

      <p>Yet, in the 32 years since the initial release of PDF, a lot has changed. People print out documents less and less. People use phones, tablets, and e-readers to read digital documents. The internet happened; web browsers now provide a platform for rendering rich documents. These changes have laid bare the limitations of PDF:</p>

      <ul>
        <li><strong>PDFs cannot easily adapt to different screen sizes.</strong> Most PDFs are designed to mimic 8.5x11" paper (or worse, <a href="https://en.wikipedia.org/wiki/PDF#/media/File:Seitengroesse_PDF_7.png">145,161 km<sup>2</sup></a>). These PDFs are readable on a computer monitor, but they are less readable on a tablet, and far less readable on a phone.</li>
        <li><strong>PDFs cannot be easily understood by programs.</strong> A plain PDF is just a scattered sequence of lines and characters. For accessibility, screen readers <a href="https://dl.acm.org/doi/10.1145/2851581.2892588">may not know</a> which order to read through the text. For data extraction, scraping tables out of a PDF is an <a href="https://openaccess.thecvf.com/content/CVPR2022/html/Smock_PubTables-1M_Towards_Comprehensive_Table_Extraction_From_Unstructured_Documents_CVPR_2022_paper.html">open</a> <a href="https://ieeexplore.ieee.org/document/5277546">area</a> of <a href="https://www.sciencedirect.com/science/article/pii/S030645731830205X?casa_token=jNV6uhUNLs0AAAAA:p6EMBh3X54Ulv9Ghtca1WPR2iL6fkhpVOVsbXj7zzinRYVa72HUGQb6VBOIPFdFoHwjEGDSB">research</a>.</li>        
        <li><strong>PDFs cannot easily express interaction.</strong> PDFs were primarily designed as static documents that cannot react to user input beyond filling in forms.</li>
      </ul>
 
      <p>
        These pros and cons can be traced back to one key fact: the PDF representation of a document is fundamentally unstructured. A PDF consists of commands like:
      </p>
      
      <figure>
      <pre>Move the cursor to the right by 0.5 inches.
Set the current font color to black.
Draw the text "Hello World" at the current position.</pre>
      </figure>

      <p>PDF commands are unstructured because a document's organization is only clear to a person looking at the rendered document, and not clear from the commands themselves. Reflowing, accessibility, data extraction, and interaction <em>all</em> rely on programmatically understanding the structure of a document. Hence, these aspects are not easy to integrate with PDFs.</p>

      <p>This raises the question: <strong>how can we design digital documents with the benefits of PDFs but without the limitations?</strong></p>
    </section>


    <section>
      <h2 id="cant-fix-pdf">Can't We Just Fix PDF?</h2>

      <p>A simple answer is to improve the PDF format. After all, we already have billions of PDFs — why reinvent the wheel?</p>

      <p>The designers of PDF are well aware of its limitations. I carefully hedged each bullet with <q>easily</q>, because PDF does make it <em>possible</em> to overcome each limitation, at least partially. PDFs can be annotated with their <a href="https://opensource.adobe.com/dc-acrobat-sdk-docs/library/pdfmark/pdfmark_Logical.html">logical structure</a> to create a <a href="https://www.washington.edu/accesstech/documents/tagged-pdf/">tagged PDF</a>. Most PDF exporters will not add tags automatically — the simplest option is to use Adobe's subscription-only <a href="https://www.adobe.com/acrobat/acrobat-pro.html">Acrobat Pro</a>, which provides an <q>Automatically tag PDF</q> action. For example, here is <a href="https://arxiv.org/abs/2310.04368">a recent paper of mine</a> with added tags:</p>

      <figure>
        <img src="img/tags.jpg" width="500" class="border" alt="A screenshot of the Adobe Acrobat interface. The left column is an academic paper. The right column is a tree of accessibility tags generated by Acrobat." />
        <figcaption>A LaTeX-generated paper with automatically added tags.</figcaption>
      </figure>

      <p>
        If you squint, you can see that the logical structure closely resembles the HTML document model. The document has sections, headings, paragraphs, and links. Adobe characterizes the logical structure as an accessibility feature, but it has other benefits. You may be surprised to know that Adobe Acrobat allows you to reflow tagged PDFs at different screen sizes. You may be unsurprised to know that reflowing does not always work well. For example:
      </p>

      <figure>
        <figure>
          <img src="img/before-resize.jpg" class="border" alt="A screenshot of the academic paper in a single-column layout in a PDF reader. It contains two paragraphs. The second paragraph is on the right wrapped around a code snippet on the left." />
          <figcaption>
            A section of the paper in its default fixed layout. 
            Note that the second paragraph is wrapped around the code snippet.
          </figcaption>
        </figure>
        <figure>
          <img src="img/after-resize.jpg" class="border" width="350" alt="A screenshot of the same academic paper after using the Acrobat reflow functionality. The first paragraph has successfully line-wrapped to a smaller size. In the second paragraph, each sentence is interleaved with the code snippet it was previously wrapping." />
          <figcaption>
            The same section of the paper after reflowing to a smaller width. 
            Note that the code is now interleaved with the second paragraph.
          </figcaption>
        </figure>
      </figure>

      <p>
        In theory, these issues could be fixed. If the world's PDF exporters could be modified to include logical structure. If Adobe's reflowing algorithm could be improved to fix its edge cases. If the reflowing algorithm could be specified, and if Adobe were willing to release it publicly, and if it were implemented in each PDF viewer. And that doesn't even cover interaction! So in practice, I don't think we can just fix the PDF format, at least within a reasonable time frame.
      </p>
    </section>

    <section>
      <h2 id="good-and-bad-html">The Good and Bad of HTML</h2>

      <p>In the meantime, we already have a structured document format which can be flexibly and interactively rendered: HTML (and CSS and Javascript, but here just collectively referred to as HTML). The HTML format provides almost exactly the inverse advantages and disadvantages of PDF.</p>
      
      <ul>
        <li><strong>HTML can more easily adapt to different screen sizes.</strong> Over the last 20 years, web developers and browser vendors have created a wide array of techniques for <a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design">responsive design</a>.</li>
        <li><strong>HTML can be more easily understood by a program.</strong>  HTML provides both an inherent structure plus <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA">additional attributes</a> to support accessibility tools.</li> 
        <li><strong>HTML can more easily express interaction.</strong> People have used HTML to produce amazing interactive documents that would be impossible in PDF. Think: <a href="https://distill.pub/">Distill.pub</a>, <a href="https://explorabl.es/">Explorable Explanations</a>, <a href="https://ciechanow.ski/">Bartosz Ciechanowski</a>, and <a href="http://worrydream.com/">Bret Victor</a>, just to name a few.</li> 
      </ul>

      <p>
        Again, these advantages are hedged with <q>more easily</q>. One can easily produce a convoluted or inaccessible HTML document. But on balance, these aspects are more true than not compared to PDF. However, HTML is lacking where PDF shines:
      </p>

      <ul>
        <li><strong>HTML is not self-contained.</strong> HTML files may contain URL references to external files that may be hosted on a server. One can rarely download an HTML file and have it render correctly without an internet connection.</li>
        <li><strong>HTML is not always rendered consistently.</strong> HTML's dynamic layout means that an author may not see the same document as a reader. Moreover, HTML layout is not fully specified, so browsers may differ in their implementation.</li>
        <li><strong>HTML is not fully stable over time.</strong> Browsers try to maintain backwards compatibility (<a href="https://www.spacejam.com/1996/">come on and slam!</a>), but the HTML format is still evolving. The <a href="https://html.spec.whatwg.org/">HTML standard</a> is a <q>living standard</q> due to the rapidly changing needs and feature sets of modern browsers.</li>
      </ul>

      <p>
        So I've been thinking: <strong>how can we design HTML documents to gain the benefits of PDFs without losing the key strengths of HTML?</strong> The rest of this document will present some early prototypes and tentative proposals in this direction.
      </p>
    </section>

    <section>
      <h2 id="epub-intro">Self-Contained HTML with EPUB</h2>

      <p>
        First, how can we make HTML documents self-contained? This is an old problem with many potential solutions. <a href="https://en.wikipedia.org/wiki/WARC_(file_format)">WARC</a>, <a href="https://en.wikipedia.org/wiki/Webarchive">webarchive</a>, and <a href="https://en.wikipedia.org/wiki/MHTML">MHTML</a> are all file formats designed to contain all the resources needed to render a web page. But these formats are more designed for snapshotting an existing website, rather than serving as a single source of truth for a web document. From my research, the most sensible format for this purpose is EPUB.
      </p>

      <p>
        EPUB is a <q>distribution and interchange format for digital publications and documents</q>, per the <a href="https://www.w3.org/TR/epub-overview-33/#">EPUB 3 Overview</a>. Reductively, an EPUB is a ZIP archive of web files: HTML, CSS, JS, and assets like images and fonts. On a technical level, what distinguishes EPUB from archival formats is that EPUB includes well-specified files that describe metadata about a document. On a social level, EPUB appears to be the HTML publication format with the most adoption and momentum in 2024, compared to moribund formats like <a href="https://en.wikipedia.org/wiki/Mobipocket">Mobi</a>.
      </p>

      <p>The <a href="https://www.w3.org/TR/epub-33">EPUB spec</a> has all the gory details, but to give you a rough sense, a sample EPUB might have the following file structure:</p> 

      <figure>
        <pre>sample.epub
├── META-INF
│   └── container.xml
└── EPUB
    ├── package.opf
    ├── nav.xhtml
    ├── chapter1.xhtml
    ├── chapter2.xhtml
    └── img
        └── sample.jpg</pre>
      </figure>

      <p>An EPUB contains <a href="https://www.w3.org/TR/epub-33/#sec-contentdocs">content documents</a> (like <code>chapter1.xhtml</code> and <code>chapter2.xhtml</code>) which contain the core HTML content. Content documents can contain relative links to assets in the EPUB, like <code>img/sample.jpg</code>. The <a href="https://www.w3.org/TR/epub-33/#sec-nav">navigation document</a> (<code>nav.xhtml</code>) provides a table of contents, and the <a href="https://www.w3.org/TR/epub-33/#sec-package-doc">package document</a> (<code>package.opf</code>) provides metadata about the document. These files collectively define one <q>rendition</q> of the whole document, and the <a href="https://www.w3.org/TR/epub-33/#sec-container-metainf-container.xml">container file</a> (<code>container.xml</code>) points to each rendition contained in the EPUB.</p>

      <p>The EPUB format optimizes for machine-readable content and metadata. HTML content is required to be in XML format (hence, <strong>X</strong>HTML). Document metadata like the title and author is provided in structured form in the package document. The navigation document has a carefully prescribed tag structure so the TOC can be consistently extracted.</p>

      <p>Overall, EPUB's structured format makes it a solid candidate for a single-file HTML document container. However, EPUB is not a silver bullet. EPUB is quite permissive in what kinds of content can be put into a content document.</p>

      <p>For example, a major issue for self-containment is that EPUB content can embed external assets. A content document can legally include an image or font file whose <code>src</code> is a URL to a hosted server. This is not hypothetical, either; as of the time of writing, Google Doc's EPUB exporter will emit CSS that will <code>@include</code> external Google Fonts files. The problem is that such an EPUB will not render correctly without an internet connection, nor will it render correctly if Google changes the URLs of its font files.</p>

      <p><dfn-container>Hence, I will propose a new format which I call a <dfn id="portable-epub">portable EPUB</dfn>, which is an EPUB with additional requirements and recommendations to improve PDF-like portability.</dfn-container> The first requirement is:</p>
        
      <div class="callout">
        <strong>Local asset requirement:</strong> All assets (like images, scripts, and fonts) embedded in a content document of a <a href="#portable-epub" data-target="dfn">portable EPUB</a> must refer to local files included in the EPUB. Hyperlinks to external files are permissible.
      </div>  
    </section>

    <section>
      <h2 id="consistency-vs-flexibility">Consistency vs. Flexibility in Rendering</h2>

      <p>
        There is a fundamental tension between consistency and flexibility in document rendering. A PDF is consistent because it is designed to render in one way: one layout, one choice of fonts, one choice of colors, one pagination, and so on. Consistency is desirable because an author can be confident that their document will look good for a reader (or at least, not look bad). Consistency has subtler benefits &#8212; because a PDF is chunked into a consistent set of pages, a passage can be cited by referring to the page containing the passage.
      </p>

      <p>On the other hand, flexibility is desirable because people want to read documents under different conditions. Device conditions include screen size (from phone to monitor) and screen capabilities (E-ink vs. LCD). Some readers may prefer larger fonts or higher contrasts for visibility, alternative color schemes for color blindness, or alternative font faces for <a href="https://opendyslexic.org/">dyslexia</a>. Sufficiently flexible documents can even permit readers to select a level of detail appropriate for their background (<a href="https://tomasp.net/coeffects/">here's an example</a>).</p>

      <p>
        Finding a balance between consistency and flexibility is arguably the most fundamental design challenge in attempting to replace PDF with EPUB. To navigate this trade-off, we first need to talk about <dfn id="reading-system">EPUB reading systems</dfn>, or the tools that render an EPUB for human consumption. To get a sense of variation between reading systems, I tried rendering this post as an EPUB (without any styling, just HTML) on four systems: <a href="https://calibre-ebook.com/">Calibre</a>, <a href="https://www.adobe.com/solutions/ebook/digital-editions.html">Adobe Digital Editions</a>, <a href="https://www.apple.com/apple-books/">Apple Books</a>, and <a href="https://www.amazon.com/dp/B09SWW583J">Amazon Kindle</a>. This is how the first page looks on each system (omitting Calibre because it looked the same as Adobe Digital Editions):
      </p>

      <figure>
        <figure>
          <img src="img/adobe-digital-edition.jpg" class="border" width="500" alt="A screenshot of this post in the Adobe Digital Editions interface. It has Times New Roman font and a classic web 1.0 kind of look." />
          <figcaption>Adobe Digital Editions</figcaption>
        </figure>

        <figure>
          <img src="img/apple-books.jpg" class="border" width="500" alt="A screenshot of this post in the Apple Books interface. It has more tasteful spacing and fonts." />
          <figcaption>Apple Books</figcaption>
        </figure>

        <figure>
          <img src="img/kindle.jpg" class="border" width="500" alt="A photograph of a Kindle displaying this post. It has much more spacing and a smaller screen." />
          <figcaption>Amazon Kindle</figcaption>
        </figure>
      </figure>

      <p>
        Calibre and Adobe Digital Editions both render the document in a plain web view, as if you opened the HTML file directly in the browser. Apple Books applies some styling, using the <a href="https://en.wikipedia.org/wiki/New_York_(2019_typeface)">New York</a> font by default and changing link decorations. Amazon Kindle increases the line height and also uses my Kindle's globally-configured default font, <a href="https://en.wikipedia.org/wiki/Bookerly">Bookerly</a>. 
      </p>

      <p>
        As you can see, an EPUB may look quite different on different reading systems. The variation displayed above seems reasonable to me. But how different is <em>too</em> different? For instance, I was recently reading <a href="https://press.uchicago.edu/ucp/books/book/distributed/H/bo70558916.html"><i>A History of Writing</i></a> on my Kindle. Here's an example of how a figure in the book renders on the Kindle:
      </p>

      <figure>
        <img src="img/history-of-writing-kindle.jpg" width="500" class="border" alt="A photograph of a Kindle displaying an excerpt from A History of Writing. A figure in the document is awkwardly positioned with an image that is too small." />
        <figcaption><span>A figure in the EPUB version of <i>A History of Writing</i> on my Kindle</span></figcaption>
      </figure>

      <p>When I read this page, I thought, <q>wow, this looks like crap.</q> The figure is way too small (although you can long-press the image and zoom), and the position of the figure seems nonsensical. I found a PDF version online, and indeed the PDF's figure has a proper size in the right location:</p>

      <figure>
        <img src="img/history-of-writing-pdf.jpg" width="500" class="border" alt="A screenshot of the same passage in a PDF viewer. The figure size and placement is more appropriate." />
        <figcaption><span>A figure in the PDF version of <i>A History of Writing</i> on my Mac</span></figcaption>
      </figure>

      <p>This is not a fully fair comparison, but it nonetheless exemplifies an author's reasonable concern today with EPUB: <em>what if it makes my document looks like crap?</em></p>
    </section>

    <section>
      <h2 id="rendering-principles">Principles for Consistent EPUB Rendering</h2>

      <p>
        I think the core solution for consistently rendering EPUBs comes down to this:
      </p>

      <ol>
        <li>The document format (i.e., <a href="#portable-epub" data-target="dfn">portable EPUB</a>) needs to establish a subset of HTML (call it <q>portable HTML</q>) which could represent most, but not all, documents.</li>
        <li>Reading systems need to guarantee that a document within the subset will always look reasonable under all reading conditions.</li>
        <li>If a document uses features outside this subset, then the document author is responsible for ensuring the readability of the document.</li>
      </ol>

      <p>
        If someone wants to write a document such as this post, then that person need not be a frontend web developer to feel confident that their document will render reasonably. Conversely, if someone wants to stuff the entire Facebook interface into an EPUB, then fine, but it's on them to ensure the document is responsive.
      </p>

      <p>For instance, one simple version of portable HTML could be described by this grammar:</p>

      <figure>
        <pre>Document ::= &#x3C;article&#x3E; Block* &#x3C;/article&#x3E;
Block    ::= &#x3C;p&#x3E; Inline* &#x3C;/p&#x3E; | &#x3C;figure&#x3E; Block* &#x3C;/figure&#x3E;
Inline   ::= text | &#x3C;strong&#x3E; Inline* &#x3C;/strong&#x3E;</pre>
      </figure>

      <p>
        The EPUB spec already defines a comparable subset for <a href="https://www.w3.org/TR/epub-33/#sec-nav-def-model">navigation documents</a>.
        I am essentially proposing to extend this idea for content documents, but as a soft constraint rather than a hard constraint. Finding the right subset of HTML will take some experimentation, so I can only gesture toward the broad solution here.
      </p>


      <div class="callout">
        <strong>Portable HTML rendering requirement:</strong> if a document only uses features in the portable HTML subset, then a <a href="#portable-epub" data-target="dfn">portable EPUB</a> reading system must guarantee that the document will render reasonably.
      </div>

      <div class="callout">
        <strong>Portable HTML generation principle:</strong> when possible, systems that generate <a href="#portable-epub" data-target="dfn">portable EPUBs</a> should output portable HTML.
      </div>

      <p>A related challenge is to define when a particular rendering is <q>good</q> or <q>reasonable</q>, so one could evaluate either a document or a reading system on its conformance to spec. For instance, if document content is accidentally rendered in an inaccesible location off-screen, then that would be a bad rendering. A more aggressive definition might say that any rendering which violates accessibility guidelines is a bad rendering. Again, finding the right standard for rendering quality will take some experimentation.</p>

      <p>If an author is particularly concerned about providing a single <q>canonical</q> rendering of their document, one fallback option is to provide a <a href="https://www.w3.org/TR/epub-33/#sec-fixed-layouts">fixed-layout rendition</a>. The EPUB format permits a rendition to specify that it should be rendered in fixed viewport size and optionally a fixed pagination. A fixed-layout rendition could then manually position all content on the page, similar to a PDF. Of course, this loses the flexibility of a reflowable rendition. But an EPUB could in theory provide <a href="https://www.w3.org/TR/epub-multi-rend-11/">multiple renditions</a>, offering users the choice of whichever best suits their reading conditions and aesthetic preferences.</p>

      <div class="callout">
        <strong>Fixed-layout fallback principle:</strong> systems that generate <a href="#portable-epub" data-target="dfn">portable EPUBs</a> can consider providing both a reflowable and fixed-layout rendition of a document.
      </div>

      <p>It's possible that the reading system, the document author, and the reader can each express preferences about how a document should render. If these preferences are conflicting, then the renderer should generally prioritize the reader over the author, and the author over the reading system. This is an ideal use case for the "cascading" aspect of CSS:</p>

      <div class="callout">
        <strong>Cascading styles principle:</strong> both documents and reading systems should express stylistic preferences (such as font face, font size, and document width) as CSS styles which can be overriden (e.g., do not use <code>!important</code>). The reading system should load the CSS rules such that the priority order is reading system styles &#x3C; document styles &#x3C; reader styles.
      </div>
    </section>

    <section>
      <h2 id="lighter-reading-system">A Lighter EPUB Reading System</h2>
      <p>
        The act of working with PDFs is relatively fluid. I can download a PDF, quickly open it in a PDF reading system like <a href="https://en.wikipedia.org/wiki/Preview_(macOS)">Preview</a>, and keep or discard the PDF as needed. But EPUB reading systems feel comparatively clunky. Loading an EPUB into Apple Books or Calibre will import the EPUB into the application's library, which both copies and potentially decompresses the file. Loading an EPUB on a Kindle requires waiting several minutes for the <a href="https://www.amazon.com/sendtokindle">Send to Kindle</a> service to complete.
      </p>

      <p>Worse, EPUB reading systems often don't give you appropriate control over rendering an EPUB. For example, to emulate the experience of reading a book, most reading systems will chunk an EPUB into pages. A reader cannot scroll the document but rather <q>turn</q> the page, meaning textually-adjacent content can be split up between pages. Whether a document is paginated or scrolled should be a reader's choice, but 3/4 reading systems I tested would only permit pagination (Calibre being the exception).
      </p>

      <p>Therefore I decided to build a lighter EPUB reading system, <a href="https://github.com/nota-lang/bene/">Bene</a>. You're using it right now. This document is an EPUB &#8212; you can download it by clicking the button in the top-right corner. The styling and icons are mostly borrowed from <a href="https://github.com/mozilla/pdf.js">pdf.js</a>. Bene is implemented in <a href="https://tauri.app/">Tauri</a>, so it can work as both a desktop app and a browser app. Please appreciate this picture of Bene running as a desktop app:</p>

      <figure>
        <img src="img/bene.png" width="600" alt="A screenshot of a MacOS window containing the same interface as this page. It displays the same post." />
        <figcaption>The Bene reading system running as a desktop app. Wow! It works!</figcaption>
      </figure>

      <p>Bene is designed to make opening and reading an EPUB feel fast and non-committal. The app is much quicker to open on my Macbook (&#60;1sec) than other desktop apps. It decompresses files on-the-fly so no additional disk space is used. The backend is implemented in Rust and compiled to Wasm for the browser version.</p>


      <p>The general design goal of Bene is to embody my ideals for a <a href="#portable-epub" data-target="dfn">portable EPUB</a> reader. That is, a utilitarian interface into an EPUB that satisfies my additional requirements for portability. Bene allows you to configure document rendering by changing the font size (try the +/- buttons in the top bar) and the viewer width (if you're on desktop, move your mouse over the right edge of the document, and drag the handle). Long-term, I want Bene to also provide richer document interactions than a standard EPUB reader, which means we must discuss scripting.</p>
    </section>

    <section>
      <h2 id="defensive-scripting">Defensively Scripting EPUBs</h2>

      <p>
        To some people, the idea of code in their documents is unappealing. Last time one of my <a href="https://nota-lang.org/">document-related projects</a> was posted to Hacker News, the <a href="https://news.ycombinator.com/item?id=37951616">top comment</a> was complaining about dynamic documents. The sentiment is understandable &#8212; concerns include:
      </p>

      <ul>
        <li><strong>Bad code:</strong> your document shouldn't crash or glitch due to a failure in a script.</li>
        <li><strong>Bad browsers:</strong> your document shouldn't fail to render when a browser updates.</li>
        <li><strong>Bad actors:</strong> a malicious document shouldn't be able to pwn your computer.</li>
        <li><strong>Bad interfaces:</strong> a script shouldn't cause your document to become unreadable.</li>
      </ul>

      <p>Yet, document scripting provides many opportunities for improving how we communicate information. For one example, if you haven't yet, try hovering your mouse over any instance of the term <a href="#portable-epub" data-target="dfn">portable EPUB</a> (or long press it on a touch screen). You should see a tooltip appear with the term's definition. The goal of these tooltips is to simplify reading a document that contains a lot of specialized notation or terminology. If you forget a definition, you can quickly look it up without having to jump around.</p>

      <p>The key design challenge is how to permit useful scripting behaviors while limiting the downsides of scripting. One strategy is as follows:</p>

      <div class="callout">
        <strong>Structure over scripts principle:</strong> documents should prefer structural annotations over scripts where possible. Documents should rely on reading systems to utilize structure where possible.
      </div>

      <p>As an example of this principle, consider how the <a href="#portable-epub" data-target="dfn">portable EPUB</a> definition and references are expressed in this document:</p>

      <figure>
        <figure>
          <syntax-highlight language="html" word-wrap="true"><pre><code>&#x3C;p&#x3E;&#x3C;dfn-container&#x3E;Hence, I will propose a new format which I call a &#x3C;dfn id=&#x22;portable-epub&#x22;&#x3E;portable EPUB&#x3C;/dfn&#x3E;, which is an EPUB with additional requirements and recommendations to improve PDF-like portability.&#x3C;/dfn-container&#x3E; The first requirement is:&#x3C;/p&#x3E;</code></pre></syntax-highlight>
          <figcaption>Creating a definition</figcaption>
        </figure>

        <figure>
          <syntax-highlight language="html" word-wrap="true"><pre><code>For one example, if you haven't yet, try hovering your mouse over any instance of the term &#x3C;a href=&#x22;#portable-epub&#x22; data-target=&#x22;dfn&#x22;&#x3E;portable EPUB&#x3C;/a&#x3E; (or long press it on a touch screen).</code></pre></syntax-highlight>
          <figcaption>Referencing a definition</figcaption>
        </figure>
      </figure>

      <p>The definition uses the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn"><code>&#x3C;dfn&#x3E;</code></a> element wrapped in a custom <code>&#x3C;dfn-container&#x3E;</code> element to indicate the scope of the definition. The reference to the definition uses a standard anchor with an addition <code>data-target</code> attribute to emphasize that a definition is being linked. The document itself does not provide a script. The Bene reading system automatically detects these annotations and provides the tooltip interaction.</p>
    </section>
        
    <section>
      <h2 id="web-components">Encapsulating Scripts with Web Components</h2>

      <p>But what if a document wants to provide an interactive component that isn't natively supported by the reading system? For instance, I have recently been working with <i>The Rust Programming Language</i>, a textbook that explains the different features of Rust. It contains a lot of passages <a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing">like this one:</a></p>

      <figure>
        <syntax-highlight language="rust">
        <pre><code>fn main() {
    let x = 5;
    let x = x + 1;
    {
        let x = x * 2;
        println!("The value of x in the inner scope is: {x}");
    }
    println!("The value of x is: {x}");
}</code></pre></syntax-highlight>
        <p>This program first binds <code class="hljs">x</code> to a value of <code class="hljs">5</code>. Then it creates a new variable
          <code class="hljs">x</code> by repeating <code class="hljs">let x =</code>, taking the original value and adding <code class="hljs">1</code> so the
          value of <code class="hljs">x</code> is then <code class="hljs">6</code>. Then, within an inner scope created with the curly
          brackets, the third <code class="hljs">let</code> statement also shadows <code class="hljs">x</code> and creates a new
          variable, multiplying the previous value by <code class="hljs">2</code> to give <code class="hljs">x</code> a value of <code class="hljs">12</code>.
          When that scope is over, the inner shadowing ends and <code class="hljs">x</code> returns to being <code class="hljs">6</code>.
          When we run this program, it will output the following:</p>
      </figure>

      <p>A challenge in reading this passage is finding the correspondences between the prose and the code. An interactive code reading component can help you track those correspondences, like this (try mousing-over or clicking-on each sentence):</p>

      <figure>
      <code-description>
        <pre><code>fn main() {
    let <span id="code-1">x</span> = <span id="code-2">5</span>;
    <span id="code-4">let <span id="code-3">x</span> =</span> <span id="code-15">x</span> <span id="code-16">+</span> <span id="code-5">1</span>;
    <span id="code-18"><span id="code-7">{</span>
        <span id="code-8">let</span> <span id="code-9">x</span> = <span id="code-10">x</span> <span id="code-17">*</span> <span id="code-11">2</span>;
        println!("The value of x in the inner scope is: {x}");
    <span id="code-13">}</span></span>
    println!("The value of x is: {<span id="code-14">x</span>}");
}</code></pre>
        <p>
          <code-step>This program first binds <a href="#code-1"><code>x</code></a> to a value of <a href="#code-2"><code>5</code></a>.</code-step>
          <code-step>Then it creates a new variable <a href="#code-3"><code>x</code></a> by repeating <a href="#code-4"><code>let x =</code></a>,</code-step>
          <code-step>taking <a href="#code-15">the original value</a> and <a href="#code-16">adding</a> <a href="#code-5">1</a> 
          so the value of <a href="#code-3"><code>x</code></a> is then 6.</code-step>
          <code-step>Then, within an <a href="#code-18">inner scope</a> created with the <a href="#code-7">curly</a> <a href="#code-13">brackets</a>,</code-step> 
          <code-step>the third <a href="#code-8"><code>let</code></a> statement also shadows <a href="#code-3"><code>x</code></a> and creates 
          <a href="#code-9">a new variable</a>,</code-step>
          <code-step><a href="#code-17">multiplying</a> <a href="#code-10">the previous value</a> by <a href="#code-11">2</a> 
          to give <a href="#code-9"><code>x</code></a> a value of 12.</code-step>
          <code-step>When <a href="#code-18">that scope</a> <a href="#code-13">is over</a>, <a href="#code-9">the inner shadowing</a> ends and <a href="#code-14"><code>x</code></a> returns to being 6.</code-step>
        </p>
      </code-description>     
      </figure> 
      
      <p>The interactive code description component is used as follows:</p>

      <figure>
<syntax-highlight language="html" word-wrap="true">
<pre><code>&#x3C;code-description&#x3E;
  &#x3C;pre&#x3E;&#x3C;code&#x3E;fn main() {
    let &#x3C;span id=&#x22;code-1&#x22;&#x3E;x&#x3C;/span&#x3E; = &#x3C;span id=&#x22;code-2&#x22;&#x3E;5&#x3C;/span&#x3E;;
    &#x3C;!-- rest of the code... --&#x3E;
}&#x3C;/code&#x3E;&#x3C;/pre&#x3E;
  &#x3C;p&#x3E;
    &#x3C;code-step&#x3E;This program first binds &#x3C;a href=&#x22;#code-1&#x22;&#x3E;&#x3C;code&#x3E;x&#x3C;/code&#x3E;&#x3C;/a&#x3E; to a value of &#x3C;a href=&#x22;#code-2&#x22;&#x3E;&#x3C;code&#x3E;5&#x3C;/code&#x3E;&#x3C;/a&#x3E;.&#x3C;/code-step&#x3E;
    &#x3C;!-- rest of the prose... --&#x3E;
  &#x3C;/p&#x3E;
&#x3C;/code-description&#x3E;</code></pre></syntax-highlight>      
      </figure>

      <p>Again, the document content contains no actual script. It contains a custom element <code>&#x3C;code-description&#x3E;</code>, and it contains a series of annotations as spans and anchors. The <code>&#x3C;code-description&#x3E;</code> element is implemented as a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components">web component</a>.</p>

      <p>Web components are a programming model for writing encapsulated interactive fragments of HTML, CSS, and Javascript. Web components are one of many ways to write componentized HTML, such as <a href="https://react.dev/">React</a>, <a href="https://www.solidjs.com/">Solid</a>, <a href="https://svelte.dev/">Svelte</a>, and <a href="https://angular.io/">Angular</a>. I see web components as the most suitable as a framework for <a href="#portable-epub" data-target="dfn">portable EPUBs</a> because:
      </p>

      <ul>
        <li><strong>Web components are a standardized technology.</strong> Its key features like <a href="https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements">custom elements</a> (for specifying the behavior of novel elements) and <a href="https://dom.spec.whatwg.org/#shadow-trees">shadow trees</a> (for encapsulating a custom element from the rest of the document) are part of the official HTML and DOM specifications. This improves the likelihood that future browsers will maintain backwards compatibility with web components written today.</li>
        <li><strong>Web components are designed for tight encapusulation.</strong> The shadow tree mechanism ensures that styling applied within a custom component cannot accidentally affect other components on the page.</li>
        <li><strong>Web components have a decent ecosystem to leverage.</strong> As far as I can tell, web components are primarily used by Google, which has created notable frameworks like <a href="https://lit.dev">Lit</a>.</li>
        <li><strong>Web components provide a clear fallback mechanism.</strong> If a renderer does not support Javascript, or if a renderer loses the ability to render web components, then an HTML renderer will simply ignore custom tags and render their contents.</li>
      </ul>

      <p>
        Thus, I propose one principle and one requirement:
      </p>

      <div class="callout">
        <strong>Encapsulated scripts principle:</strong> interactive components should be implemented as web components when possible, or otherwise be carefully designed to avoid conflicting with the base document or other components.
      </div>

      <div class="callout">
        <strong>Components fallback requirement:</strong> interactive components must provide a fallback mechanism for rendering a reasonable substitute if Javascript is disabled.
      </div>
    </section>
    <section>
      <h2 id="where-to-go">Where To Go From Here?</h2>

      <p>
        Every time I have told someone <q>I want to replace PDF</q>, the statement has been met with extreme skepticism. Hopefully this document has convinced you that HTML-via-EPUB could potentially be a viable and desirable document format for the future.
      </p>

      <p>My short-term goal is to implement a few more documents in the <a href="#portable-epub" data-target="dfn">portable EPUB</a> format, such as my <a href="https://willcrichton.net/nota">PLDI paper</a>. That will challenge both the file format and the reading system to be flexible enough to support each document type. In particular, each document should look good under a range of reading conditions (screen sizes, font sizes and faces, etc.).</p>

      <p>My long-term goal is to design a document language that makes it easy to generate <a href="#portable-epub" data-target="dfn">portable EPUBs</a>. Writing XHTML by hand is not reasonable. I designed <a href="https://nota-lang.org/">Nota</a> before I was thinking about EPUBs, so its next iteration will be targeted at this new format.</p>

      <p>
        If you have any thoughts about how to make this work or why I'm wrong, let me know by <a href="mailto:crichton.will@gmail.com">email</a> or <a href="https://twitter.com/tonofcrates">Twitter</a> or <a href="https://mastodon.social/@tonofcrates">Mastodon</a> or wherever this gets posted. If you would like to help out, please reach out! This is just a passion project in my free time (for now...), so any programming or document authoring assistance could provide a lot of momentum to the project. 
      </p>
    </section>
    <section>
      <h2 id="but-what-about">But What About...</h2>

      <p>A brief postscript for a few things I haven't touched on.</p>

      <p>
        <strong>...security?</strong> You might dislike the idea that document authors can run arbitrary Javascript on your personal computer. But then again, you presumably use both a PDF reader and a web browser on the daily, and those both run Javascript. What I'm proposing is not really any <em>less</em> secure than our current state of affairs. If anything, I'd hope that browsers are more battle-hardened than PDF viewers regarding code execution. Certainly the designers of EPUB reading systems should be careful to not give documents any <em>additional</em> capabilities beyond those already provided by the browser.</p>

      <p><strong>...aesthetics?</strong> People often intuit that LaTeX-generated PDFs look prettier than HTML documents, or even prettier than PDFs created by other software. This is because Donald Knuth took his job <a href="https://www-cs-faculty.stanford.edu/~knuth/dt.html">very seriously</a>. In particular, the <a href="https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380111102?">Knuth-Plass line-breaking algorithm</a> tends to produce better-looking justified text than whatever algorithm is used by browsers.</p>
      <p>There's two ways to make progress here. One is for browsers to provide more typography tools. Allegedly, <code>text-wrap: pretty</code> is <a href="https://developer.chrome.com/blog/css-text-wrap-pretty/">supposed to help</a>, but in my brief testing it doesn't seem to improve line-break quality. The other way is to <a href="https://mpetroff.net/2020/05/pre-calculated-line-breaks-for-html-css/">pre-calculate line breaks</a>, which would only work for fixed-layout renditions.</p>

      <p><strong>...page citations?</strong> I think we just have to give up on citing content by pages. Instead, we should mandate a consistent numbering scheme for block elements within a document, and have people cite using that scheme. For example, Bene will auto-number all blocks. If you're on a desktop, try hovering your mouse in the left column next to the top of any paragraph.</p>
    </section>
    </article>
  </body>
</html>
