@use 'sass:color';
@use 'sass:list';

// print(', '.join(['rgb(' + ','.join([str(int(ch * 255)) for ch in c]) + ')' for c in sns.color_palette('tab10')]))
$colors: (rgb(31,119,180), rgb(255,127,14), rgb(44,160,44), rgb(214,39,40), rgb(148,103,189), rgb(140,86,75), rgb(227,119,194), rgb(127,127,127), rgb(188,189,34), rgb(23,190,207));

@each $color in $colors {
  $index: list.index($colors, $color) - 1;

  .code-highlight.highlight-#{$index} {
    border-bottom: 2px solid $color;

    &::before {
      content: "#{$index + 1}";
    }

    &.emphasize, &:hover {
      background-color: rgba($color, 0.1);
    }
  }

  .code-delimiter.start.highlight-#{$index}::after {
    content: "#{$index + 1}";
  }

  .code-delimiter.highlight-#{$index}::before {
    color: color.scale($color, $lightness: -30%);
  }
}

.code-delimiter, .code-highlight {
  position: relative;
  transition: background-color 0.2s;

  &::before, &::after {
    position: absolute;
  }
}

.code-highlight::before, .code-delimiter::after {
  font-size: 10px;
  font-family: monospace;
  color: #555;
}

.cm-editor .code-highlight::before {
  top: -1.2em;
  right: 0;
} 

.cm-editor .code-delimiter::after {
  top: -1.2em;
  left: -1ch;
}

.description .code-highlight::before {
  top: -2em;
  right: 0;
}

.code-delimiter.start::before {  
  content: "⟨";
  left: -1ch;
}

.code-delimiter.end::before {
  content: "⟩";
  right: -1ch;
}

.description {
  line-height: 2em;

  > :last-child {
    margin-bottom: 0;
  }

  a {
    text-decoration: none;
    color: inherit;
    white-space: nowrap;
  }

  code-step {
    padding: calc(0.5 * (1lh - 1em)) 0;

    &::before, &::after {
      color: #ccc;
    }

    &::before {
      content: "[";
    }
    
    &::after {
      content: "]";
    }

    &:hover::before, &:hover::after {
      color: #e45757;
    }
  }
}